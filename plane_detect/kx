#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>

#include <opencv2/core/core.hpp>
#include <boost/thread/mutex.hpp>

#include <math.h>
#include <cmath>
#include <eigen3/Eigen/Geometry>

static const std::string WINDOW1 = "window1";
static const std::string WINDOW2 = "window2";
static const std::string WINDOW3 = "window3";
static const std::string WINDOW4 = "window4";
static const std::string WINDOW5 = "window5";
static const int ROW_NUM=480;
static const int COL_NUM=640;


namespace enc = sensor_msgs::image_encodings;

class PlaneDetect
{
	ros::NodeHandle nh_;
	image_transport::ImageTransport it_;
	image_transport::Subscriber image_sub_;
	image_transport::Publisher image_pub_;

	sensor_msgs::ImageConstPtr kinect_depthimg_msg, old_kinect_depthimg_msg;
	boost::mutex m;

	public:
	PlaneDetect()
		: it_(nh_)
	{
		// Subscrive to input video feed and publish output video feed
		image_sub_ = it_.subscribe("/camera/depth/image_raw", 1,
		  &PlaneDetect::planeDetect_callback, this);

		image_pub_ = it_.advertise("/image_converter/output_video", 1);

		cv::namedWindow(WINDOW1);
		cv::namedWindow(WINDOW2);
		cv::namedWindow(WINDOW3);
		cv::namedWindow(WINDOW4);
	}
	~PlaneDetect()
	{
		cv::destroyWindow(WINDOW1);
		cv::destroyWindow(WINDOW2);
		cv::destroyWindow(WINDOW3);
		cv::destroyWindow(WINDOW4);
	}
	void planeDetect_callback(const sensor_msgs::ImageConstPtr& msg)
	{

		m.lock ();
		kinect_depthimg_msg = msg;
		m.unlock ();

		if (!kinect_depthimg_msg || kinect_depthimg_msg == old_kinect_depthimg_msg)
			return;
		old_kinect_depthimg_msg = kinect_depthimg_msg;

		//change ros image to cv image
		cv_bridge::CvImagePtr cv_depthptr;
		try
		{
			cv_depthptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::TYPE_32FC1);
		}
		catch (cv_bridge::Exception& e)
		{
			ROS_ERROR("cv_bridge exception: %s", e.what());
			return;
		}

		Process(cv_depthptr);
	}

	void Process(cv_bridge::CvImagePtr _cvimageptr)
	{

		float kxsqr_sum=0;
		int counterx=0;
		int counter2x=0;
		int concerned_range=10;
		cv::Mat image_derivative_x(ROW_NUM,COL_NUM,CV_32FC1);
		cv::Mat image_derivative2_x(ROW_NUM,COL_NUM,CV_32FC1);
		float derivative2_xtol=2;

		//y
		float ky_sum=0;
		int countery=0;
		int kx_plus_counter=1;
		int kx_minus_counter=1;
		float sum_sqr_kx_plus=0;
		float sum_sqr_kx_minus=0;
		cv::Mat image_derivative_y(ROW_NUM,COL_NUM,CV_32FC1);
		for(int i=concerned_range;i<ROW_NUM-concerned_range;i++)
		{

			for (int j=concerned_range;j<COL_NUM-concerned_range;j++)
			{
				image_derivative_x.ptr<float>(i)[j]=
					(_cvimageptr->image.ptr<float>(i)[j+1]
					-_cvimageptr->image.ptr<float>(i)[j])/(2*concerned_range);

				counterx++;



				float t_derivative2=fabs(_cvimageptr->image.ptr<float>(i)[j-1]
								+_cvimageptr->image.ptr<float>(i)[j+1]
								-2*_cvimageptr->image.ptr<float>(i)[j]);
				if((t_derivative2<derivative2_xtol))
				{
					image_derivative2_x.ptr<float>(i)[j]=255;
					counter2x++;

					if(image_derivative_x.ptr<float>(i)[j]>0)
					{
						kx_plus_counter++;
						sum_sqr_kx_plus+=image_derivative_x.ptr<float>(i)[j]*image_derivative_x.ptr<float>(i)[j];
					}
					if(image_derivative_x.ptr<float>(i)[j]<0)
					{
						kx_minus_counter++;
						sum_sqr_kx_minus+=image_derivative_x.ptr<float>(i)[j]*image_derivative_x.ptr<float>(i)[j];

					}

				}
				else
				{
					image_derivative2_x.ptr<float>(i)[j]=0;
				}


				//y direction
				if((_cvimageptr->image.ptr<float>(i+1)[j]!=0)&&(_cvimageptr->image.ptr<float>(i)[j]!=0))
				{
					image_derivative_y.ptr<float>(i)[j]=
							_cvimageptr->image.ptr<float>(i+1)[j]-_cvimageptr->image.ptr<float>(i)[j];
					ky_sum+=image_derivative_y.ptr<float>(i)[j];
					countery++;
				}

			}
		}

		float t_ratio=kx_plus_counter/kx_minus_counter;
		float kx_aver;
		if(t_ratio>1.1)
		{
			kx_aver=sqrt(sum_sqr_kx_plus/kx_plus_counter);

		}
		else if(t_ratio<1/1.1)
		{
			kx_aver=-sqrt(sum_sqr_kx_minus/kx_minus_counter);
		}
		else
		{
			kx_aver=0;
		}

		cv::Mat image_balanced_x(ROW_NUM,COL_NUM,CV_32FC1);
		float depth_sum=0;
		float depth_balanced_sum=0;
		float depth_cov=0;
		float depth_balanced_cov=0;
		int counter_cov;
		for(int i=concerned_range;i<ROW_NUM-concerned_range;i++)
		{
			for (int j=concerned_range;j<COL_NUM-concerned_range;j++)
			{
				if(image_derivative2_x.ptr<float>(i)[j]!=0)
				{
					image_balanced_x.ptr<float>(i)[j]=_cvimageptr->image.ptr<float>(i)[j+1]+kx_aver*(j-COL_NUM/2);
					depth_sum+=_cvimageptr->image.ptr<float>(i)[j];
					depth_balanced_sum+=image_balanced_x.ptr<float>(i)[j];
				}
			}
		}

		float depth_aver=depth_sum/counterx;
		float depth_balanced_aver=depth_balanced_sum/counterx;
		for(int i=concerned_range;i<ROW_NUM-concerned_range;i++)
		{
			for (int j=concerned_range;j<COL_NUM-concerned_range;j++)
			{
				if(image_derivative2_x.ptr<float>(i)[j]!=0)
				{
					depth_cov+=(_cvimageptr->image.ptr<float>(i)[j]-depth_aver)*(_cvimageptr->image.ptr<float>(i)[j]-depth_aver);
					depth_balanced_cov+=(image_balanced_x.ptr<float>(i)[j]-depth_balanced_aver)
								*(image_balanced_x.ptr<float>(i)[j]-depth_balanced_aver);

				}

			}
		}
		depth_cov=depth_cov/counterx;
		depth_balanced_cov=depth_balanced_cov/counterx;


	//	float kx_aver=kx_sum/counterx;
		float ky_aver=ky_sum/countery;
		ROS_INFO("%d,%d,%d,%d,%f",counterx,counter2x,kx_plus_counter,kx_minus_counter,kx_aver);
		ROS_INFO("%f,%f,%f,%f",depth_aver,depth_balanced_aver,depth_cov,depth_balanced_cov);


		int counterx_board=0;
		float k_sum_board=0;
		float tolerencex;
	//	if (kx_aver<1) tolerencex=5+5*fabs(kx_aver);
	//	else tolerencex=10*fabs(kx_aver);


/*		for(int i=0;i<ROW_NUM;i++)
		{
			for (int j=0;j<COL_NUM;j++)
			{

				if((fabs(image_derivative_x.ptr<float>(i)[j])<tolerence)&&(image_derivative_x.ptr<float>(i)[j]!=0))
				{
					k_sum_board+=image_derivative_x.ptr<float>(i)[j];
					counter_board++;
					float density=image_derivative_x.ptr<float>(i)[j]/tolerence;
					cv::circle(image_board,cv::Point(j,i),0,cv::Scalar(0,0,255*density));
				}
		}
		}

*/
		//				image_balanced_x.ptr<float>(i)[j]=_cvimageptr->image.ptr<float>(i)[j]-j*k_aver;

//		float k_aver_board=k_sum_board/counter_board;

//		float percent=(float)counter_board/640/480*100;
//		ROS_INFO("%d,%f,%f,%f",counter,k_min,k_aver,k_max);
//		ROS_INFO("      %f,%d,%.1f,%.3f",tolerence,counter_board,percent,k_aver_board);


		cv::imshow(WINDOW1, _cvimageptr->image);
		cv::imshow(WINDOW2, image_derivative_x);
		cv::imshow(WINDOW3, image_derivative2_x);
		cv::imshow(WINDOW4, image_balanced_x);
		cv::waitKey(3);

	}
};

int main(int argc, char** argv)
{
	ros::init(argc, argv, "image_converter");
	PlaneDetect pd;
	ros::spin();
	return 0;
}
